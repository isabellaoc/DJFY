{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","_this","Object","classCallCheck","this","token","possibleConstructorReturn","getPrototypeOf","call","getHashParams","access_token","setAccessToken","state","loggedIn","spotifyAccount","accountName","accountPic","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","_this2","getMe","then","response","setState","display_name","images","url","_this3","react_default","a","createElement","className","class","src","style","height","onClick","getConnectedAccount","href","joinRoom","App_Room","Component","Room","type","width","borderWidth","fontSize","backgroundColor","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ff8a09e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './css/bootstrap.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n\n    // Get access token to be able to fetch data from the Spotify API\n    constructor() {\n      super();\n      const params = this.getHashParams();\n      const token = params.access_token;\n      if (token) {\n          spotifyApi.setAccessToken(token);\n      }\n      this.state = {\n          loggedIn: token ? true : false,\n          spotifyAccount: {accountName: 'Not Logged In', accountPic: ''}\n      }\n    }\n\n    // Using code from authorization_code/public/index.html\n    // (https://github.com/spotify/web-api-auth-examples)\n    // Extracts token params from hash string of the URL into an object with key-value pairs.\n    getHashParams() {\n      var hashParams = {};\n      var e, r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n      e = r.exec(q)\n      while (e) {\n         hashParams[e[1]] = decodeURIComponent(e[2]);\n         e = r.exec(q);\n      }\n      return hashParams;\n    }\n\n    // Request API data\n    // Using library provided by JMPerez/spotify-web-api-js\n    // (https://github.com/JMPerez/spotify-web-api-js)\n    getConnectedAccount() {\n        spotifyApi.getMe()\n            .then((response) => {\n                this.setState( {\n                    spotifyAccount: {\n                        accountName: response.display_name,\n                        accountPic: response.images[0].url\n                    }\n                });\n            })\n    }\n\n    joinRoom() {\n        // \n    }\n\n    // Display our data\n    render() {\n        return (\n          <div className=\"App\">\n            <h1 class=\"cover-heading\">DJFY</h1>\n            <div>\n                Spotify Account: {this.state.spotifyAccount.accountName}\n            </div>\n            <div>\n                <img src={this.state.spotifyAccount.accountPic} style={{ height: 100 }}/>\n                <br /> <br />\n            </div>\n\n            {/* Show button to check spotify account */}\n            {\n                this.state.loggedIn &&\n                <button class=\"btn btn-sm btn-primary\" onClick={() => this.getConnectedAccount()}>\n                    ShowAccount\n                </button>\n            }\n\n            <br /> <br /> <br />\n            <p>\n                Connect to Spotify &nbsp;\n                <a href=\"https://djfy-backend-server.herokuapp.com/login\" class=\"btn btn-lg btn-secondary\">Connect</a>\n\n                &nbsp;&nbsp;&nbsp;&nbsp;{/* Adding space in between the two buttons */}\n\n                Join Room &nbsp;\n                <button class=\"btn btn-lg btn-secondary\" onClick={() => this.joinRoom()}>Join</button>\n            </p>\n\n            <Room> </Room>\n\n          </div>\n        );\n    }\n}\n\nclass Room extends Component {\n    render() {\n      return (\n        <div className=\"Room\">\n        <h2>Playlist</h2>\n\n        <ul>\n            Search: <input type = \"text\"/>\n            <br/> <br/>\n\n            <li><button style = {{width: 25, height: 25, borderWidth: 3, fontSize: 15, backgroundColor: '#FF0000'}}>-</button> Song 1</li>\n            <li><button style = {{width: 25, height: 25, borderWidth: 3, fontSize: 15, backgroundColor: '#FF0000'}}>-</button> Song 2</li>\n            <li><button style = {{width: 25, height: 25, borderWidth: 3, fontSize: 15, backgroundColor: '#FF0000'}}>-</button> Song 3</li>\n        </ul>\n      </div>\n      );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}